version: '3'

silent: true

tasks:
  install:
    desc: install required dependencies and tools
    cmds:
      - task: install-tools
      - task: install-service-dependencies
      - task: install-ui-dependencies
      - task: install-e2e-dependencies
      - task: install-reverse-proxy
      - task: generate-certificates

  install-tools:
    cmds:
      - '$(cd $HOME && go get -u github.com/onsi/ginkgo/ginkgo)'
      - curl -fsSL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b "$PWD/tools" v1.27.0
      - HOMEBREW_NO_AUTO_UPDATE=1 brew list --full-name | grep 'mkcert' &> /dev/null || HOMEBREW_NO_AUTO_UPDATE=1 brew install mkcert
      - mkcert -install

  install-e2e-dependencies:
    dir: e2e/
    cmds: [ npm ci --no-progress ]

  install-service-dependencies:
    dir: service/
    cmds: [ go mod download ]

  install-ui-dependencies:
    dir: ui/
    cmds: [ npm ci --no-progress ]

  install-reverse-proxy:
    dir: reverse-proxy/
    cmds: [ ./build.sh ]

  generate-certificates:
    dir: reverse-proxy/
    cmds:
      - mkcert "vinotheque.foo.bar"

  register-local-domain:
    desc: propagate local domain to hosts
    cmds:
      - echo '127.0.0.1 vinotheque.foo.bar' | sudo tee -a /etc/hosts

  world:
    desc: run - literally - everything :)
    cmds:
      - task: check-preconditions
      - task: stop
      - task: start-dependencies
      - task: format
      - task: lint
      - task: test
      - task: e2e
      - task: cleanup-dependencies-service
      - task: stop

  check-preconditions:
    desc: check if everything is ready to go
    cmds:
      - which go &> /dev/null
      - which node &> /dev/null
      - which ginkgo &> /dev/null
      - which screen &> /dev/null
      - which curl &> /dev/null
      - which mysql &> /dev/null
      - '[[ -x tools/golangci-lint ]]'
      - '[[ -x reverse-proxy/caddy ]]'
      - go version | grep 'go1.15' &> /dev/null
      - node --version | grep 'v14.' &> /dev/null
      - tools/golangci-lint --version | grep 'has version 1.27' &> /dev/null

  format:
    desc: formats sources
    deps: [ format-service ]

  format-e2e:
    desc: formats sources in e2e
    dir: e2e/
    cmds: [ npm run format ]

  format-ui:
    desc: formats sources in ui
    dir: ui/
    cmds: [ npm run format ]

  format-service:
    desc: formats sources in service
    dir: service/
    cmds: [ go fmt ./... ]

  lint:
    desc: lints project
    cmds: [ task: lint-service, task: lint-ui ]

  lint-service:
    desc: lints service
    dir: service/
    cmds: [ ../tools/golangci-lint run --fix ]

  lint-ui:
    desc: lints ui
    dir: ui/
    cmds: [ npm run lint:fix ]

  test:
    desc: runs component tests
    cmds: [ task: test-service, task: test-ui ]

  test-service:
    desc: run tests for service
    dir: service/
    cmds: [ ginkgo -r --skipPackage=integration, ginkgo test/integration ]

  test-ui:
    desc: run ui tests
    dir: ui/
    cmds:
      - task: unit-test-ui
      - task: component-test-ui

  unit-test-ui:
    desc: run ui tests
    dir: ui/
    cmds: [ npm run test ]

  component-test-ui:
    desc: run component ui-tests
    deps: [ start-ui ]
    dir: ui/
    cmds:
      - npm run component
      - task: stop-ui

  cleanup-dependencies-service:
    dir: service/
    cmds: [ go mod verify, go mod tidy ]

  e2e:
    desc: run e2e test
    deps: [ start-reverse-proxy, start-service, start-ui ]
    dir: e2e
    cmds: [ npm run test ]

  start-reverse-proxy:
    desc: locally start reverse-proxy
    deps: [ stop-reverse-proxy ]
    dir: reverse-proxy/
    cmds:
      - screen -dmS reverse-proxy ./caddy start
      - ./wait-healthy.sh

  stop-reverse-proxy:
    desc: locally stop reverse proxy
    cmds: [ '(! lsof -ti tcp:8443 &> /dev/null) || kill -9 $(lsof -ti tcp:8443) &> /dev/null || true' ]

  start-service:
    desc: locally start service
    deps: [ stop-service ]
    dir: service/
    env:
      PORT: 8080
      WINES: test/wines.yml
      ELASTIC_APM_SECRET_TOKEN: very-secret
    cmds:
      - screen -dmS service go run main.go
      - ./wait-healthy.sh

  stop-service:
    desc: locally stop service
    cmds: [ '(! lsof -ti tcp:8080 &> /dev/null) || kill -9 $(lsof -ti tcp:8080) &> /dev/null || true' ]

  start-ui:
    desc: locally start ui
    deps: [ stop-ui ]
    dir: ui/
    cmds:
      - screen -dmS ui npm run start
      - ./wait-healthy.sh

  stop-ui:
    desc: locally stop ui
    cmds: [ '(! lsof -ti tcp:4200 &> /dev/null) || kill -9 $(lsof -ti tcp:4200) &> /dev/null || true' ]

  stop:
    desc: stop components for local development
    deps: [ stop-dependencies, stop-reverse-proxy, stop-service, stop-ui ]

  stop-dependencies:
    desc: stop dependencies
    dir: dependencies/
    cmds: [ docker-compose down --remove-orphans --volumes &> /dev/null ]

  start:
    desc: start components for local development
    deps: [ start-reverse-proxy, start-service, start-ui ]

  start-dependencies:
    desc: start dependencies
    dir: dependencies/
    cmds:
      - docker-compose up -d --remove-orphans --force-recreate &> /dev/null
      - ./wait-mariadb-healthy.sh

  default:
    cmds: [ task: world ]

  start-local-docker-compose:
    desc: start local within docker-compose
    deps: [ build-docker-images, generate-certificates-for-docker ]
    dir: deployments/
    cmds:
      - task: stop-local-docker-compose
      - docker-compose up --remove-orphans --force-recreate -d
      - open https://vinotheque.foo.bar:8001

  stop-local-docker-compose:
    dir: deployments/
    cmds: [ docker-compose down --remove-orphans -v ]

  build-docker-images:
    deps: [ build-ui-docker-image, build-reverse-proxy-docker-image, build-service-docker-image ]

  generate-certificates-for-docker:
    dir: deployments/certificates/
    cmds:
      - mkcert "vinotheque.foo.bar"

  build-ui-docker-image:
    dir: ui/
    cmds: [ docker image build -t jaedle/vinotheque:ui-latest . ]

  build-reverse-proxy-docker-image:
    dir: reverse-proxy/
    cmds: [ docker image build -t jaedle/vinotheque:reverse-proxy-latest . ]

  build-service-docker-image:
    dir: service/
    cmds: [ docker image build -t jaedle/vinotheque:service-latest . ]

  docker-login:
    desc: login into dockerhub
    cmds:
      - echo '{{.password}}' | docker login --username '{{.username}}' --password-stdin

  publish-docker-images:
    desc: push docker images to dockerhub
    deps: [ push-ui-docker-image, push-reverse-proxy-docker-image, push-service-docker-image ]

  push-ui-docker-image:
    cmds: [ docker image push jaedle/vinotheque:ui-latest ]

  push-reverse-proxy-docker-image:
    cmds: [ docker image push jaedle/vinotheque:reverse-proxy-latest ]

  push-service-docker-image:
    cmds: [ docker image push jaedle/vinotheque:service-latest ]
